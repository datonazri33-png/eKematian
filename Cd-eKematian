// App.js — eKEMATIAN single-file final (CRUD, search, death payment logic, upload, export PDF/CSV)
import React, { useState, useEffect } from 'react';
import {
  View, Text, Image, FlatList, StyleSheet, TextInput, Button,
  TouchableOpacity, Modal, Alert, ScrollView
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import * as Print from 'expo-print';
import * as Sharing from 'expo-sharing';
import * as FileSystem from 'expo-file-system';
import * as DocumentPicker from 'expo-document-picker';

/*
Data shape for each participant:
{
  id: number,
  name: string,
  ic: string,
  address: string,
  will: string,
  income: number,
  expense: number,
  funeral: number,
  status: 'alive' | 'dead',
  image: string
}
*/

const STORAGE_KEY = 'ekematian_participants_v1';
const MAINT_KEY = 'ekematian_maintenance_v1';

const saveData = async (key, value) => {
  try { await AsyncStorage.setItem(key, JSON.stringify(value)); }
  catch (e) { console.error('saveData error', e); }
};
const loadData = async (key) => {
  try { const v = await AsyncStorage.getItem(key); return v ? JSON.parse(v) : null; }
  catch (e) { console.error('loadData error', e); return null; }
};

const fmt = (n) => {
  if (isNaN(n)) return 'RM0.00';
  return 'RM' + Number(n).toFixed(2);
};

function ClaimItem({ participant, onEdit, onDelete, onMarkDead }) {
  return (
    <View style={styles.item}>
      <Image source={{ uri: participant.image || 'https://via.placeholder.com/80' }} style={styles.avatar} />
      <View style={{ flex: 1, marginRight: 8 }}>
        <Text style={styles.name}>{participant.name} {participant.status === 'dead' ? '(Meninggal)' : ''}</Text>
        <Text style={{ fontSize: 12 }}>{participant.ic}</Text>
        <Text style={{ fontSize: 12 }}>{participant.address || ''}</Text>
        <Text style={{ fontSize: 12, color: '#333' }}>In: {fmt(participant.income)}  Out: {fmt(participant.expense)}  Funeral: {fmt(participant.funeral || 0)}</Text>
      </View>

      <View style={{ alignItems: 'flex-end' }}>
        <TouchableOpacity onPress={() => onEdit(participant)} style={styles.btnSmall}>
          <Text style={styles.btnText}>Edit</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => onDelete(participant.id)} style={[styles.btnSmall, { backgroundColor: '#d9534f', marginTop: 6 }]}>
          <Text style={styles.btnText}>Padam</Text>
        </TouchableOpacity>
        {participant.status !== 'dead' ? (
          <TouchableOpacity onPress={() => onMarkDead(participant)} style={[styles.btnSmall, { backgroundColor: '#6c757d', marginTop: 6 }]}>
            <Text style={styles.btnText}>Tandakan Meninggal</Text>
          </TouchableOpacity>
        ) : null}
      </View>
    </View>
  );
}

function VolunteerItem({ volunteer }) {
  return (
    <View style={styles.item}>
      <Image source={{ uri: volunteer.image || 'https://via.placeholder.com/80' }} style={styles.avatar} />
      <View style={{ flex: 1 }}>
        <Text style={styles.name}>{volunteer.name}</Text>
        <Text style={{ fontSize: 12 }}>{volunteer.role}</Text>
      </View>
    </View>
  );
}

function AddEditModal({ visible, onClose, onSave, editData }) {
  const [name, setName] = useState('');
  const [ic, setIc] = useState('');
  const [address, setAddress] = useState('');
  const [will, setWill] = useState('');
  const [funeral, setFuneral] = useState('');

  useEffect(() => {
    if (editData) {
      setName(editData.name || '');
      setIc(editData.ic || '');
      setAddress(editData.address || '');
      setWill(editData.will || '');
      setFuneral(String(editData.funeral || ''));
    } else {
      setName(''); setIc(''); setAddress(''); setWill(''); setFuneral('');
    }
  }, [editData]);

  const handleSave = () => {
    if (!name) { Alert.alert('Sila masukkan nama'); return; }
    const payload = {
      id: editData ? editData.id : Date.now(),
      name: name.trim(),
      ic: ic.trim(),
      address: address.trim(),
      will: will.trim(),
      income: editData ? Number(editData.income || 0) : 33.0,
      expense: editData ? Number(editData.expense || 0) : 0,
      funeral: Number(funeral || 0),
      status: editData ? editData.status || 'alive' : 'alive',
      image: editData ? editData.image : 'https://via.placeholder.com/100'
    };
    onSave(payload);
    onClose();
  };

  return (
    <Modal visible={visible} animationType="slide">
      <ScrollView style={{ flex: 1, padding: 18, backgroundColor: '#fff' }}>
        <Text style={{ fontSize: 18, fontWeight: 'bold', marginBottom: 10 }}>{editData ? 'Ubah Ahli' : 'Tambah Ahli (Yuran RM33)'}</Text>

        <TextInput style={styles.input} placeholder="Nama" value={name} onChangeText={setName} />
        <TextInput style={styles.input} placeholder="No. IC" value={ic} onChangeText={setIc} />
        <TextInput style={styles.input} placeholder="Alamat waris" value={address} onChangeText={setAddress} />
        <TextInput style={styles.input} placeholder="Wasiat / Catatan hutang" value={will} onChangeText={setWill} />
        <TextInput style={styles.input} placeholder="Kos jenazah (optional)" value={funeral} onChangeText={setFuneral} keyboardType="numeric" />

        <View style={{ marginTop: 12 }}>
          <Button title={editData ? 'Simpan Perubahan' : 'Tambah Ahli (bayar RM33)'} onPress={handleSave} />
        </View>
        <View style={{ marginTop: 8 }}>
          <Button title="Batal" color="#6c757d" onPress={onClose} />
        </View>
      </ScrollView>
    </Modal>
  );
}

export default function App() {
  const [participants, setParticipants] = useState([]);
  const [maintenance, setMaintenance] = useState(0);
  const [search, setSearch] = useState('');
  const [modalVisible, setModalVisible] = useState(false);
  const [editData, setEditData] = useState(null);

  const volunteers = [
    { id: 201, name: 'Ketua Sukarelawan - Siti', role: 'Ketua', image: 'https://via.placeholder.com/80' },
    { id: 202, name: 'Anggota - Ahmad', role: 'Anggota', image: 'https://via.placeholder.com/80' },
  ];

  const dummy = [
    { id: 1, name: 'Ahmad Ali', ic: '900101-14-5678', address: 'Alamat A', will: '', income: 33.0, expense: 0.0, funeral: 0.0, status: 'alive', image: 'https://via.placeholder.com/100' },
    { id: 2, name: 'Siti Aminah', ic: '920202-10-1234', address: 'Alamat B', will: '', income: 33.0, expense: 0.0, funeral: 0.0, status: 'alive', image: 'https://via.placeholder.com/100' },
  ];

  useEffect(() => {
    (async () => {
      const ps = await loadData(STORAGE_KEY);
      const mf = await loadData(MAINT_KEY);
      setParticipants(ps && Array.isArray(ps) ? ps : dummy);
      setMaintenance(typeof mf === 'number' ? mf : 0);
    })();
  }, []);

  useEffect(() => { saveData(STORAGE_KEY, participants); }, [participants]);
  useEffect(() => { saveData(MAINT_KEY, maintenance); }, [maintenance]);

  const totalParticipants = participants.length;
  const totalIncome = participants.reduce((s, p) => s + Number(p.income || 0), 0);
  const totalExpense = participants.reduce((s, p) => s + Number(p.expense || 0) + Number(p.funeral || 0), 0);
  const balance = totalIncome - totalExpense - Number(maintenance || 0);

  const handleSaveParticipant = async (payload) => {
    payload.income = Number(payload.income || 0);
    payload.expense = Number(payload.expense || 0);
    payload.funeral = Number(payload.funeral || 0);
    setParticipants(prev => {
      const exists = prev.some(x => x.id === payload.id);
      if (exists) return prev.map(x => x.id === payload.id ? { ...x, ...payload } : x);
      return [...prev, payload];
    });
  };

  const handleDelete = (id) => {
    Alert.alert('Confirm', 'Padam ahli ini?', [
      { text: 'Batal', style: 'cancel' },
      { text: 'Padam', style: 'destructive', onPress: () => { setParticipants(prev => prev.filter(p => p.id !== id)); } }
    ]);
  };

  const handleMarkDead = (deceased) => {
    if (deceased.status === 'dead') { Alert.alert('Nota', 'Ahli ini sudah ditandakan meninggal.'); return; }

    Alert.alert('Sahkan', `Tandakan ${deceased.name} sebagai meninggal? Ini akan caj RM1 kepada setiap ahli hidup lain.`, [
      { text: 'Batal', style: 'cancel' },
      {
        text: 'Ok', onPress: () => {
          setParticipants(prev => {
            const aliveOthers = prev.filter(p => p.id !== deceased.id && p.status !== 'dead');
            const payers = aliveOthers.length;
            const updatedOthers = prev.map(p => {
              if (p.id !== deceased.id && p.status !== 'dead') { return { ...p, expense: Number(p.expense || 0) + 1 }; }
              return p;
            });
            const deceasedShare = (payers * 1) * 0.75;
            const updated = updatedOthers.map(p => {
              if (p.id === deceased.id) { return { ...p, income: Number(p.income || 0) + deceasedShare, status: 'dead' }; }
              return p;
            });
            setMaintenance(m => Number(m || 0) + (payers * 1 * 0.25));
            return updated;
          });
        }
      }
    ]);
  };

  const resetDummy = async () => {
    Alert.alert('Reset', 'Gantikan dengan data dummy contoh?', [
      { text: 'Batal', style: 'cancel' },
      { text: 'OK', onPress: async () => {
          setParticipants(dummy);
          setMaintenance(0);
          await saveData(STORAGE_KEY, dummy);
          await saveData(MAINT_KEY, 0);
        } }
    ]);
  };

  const clearAll = async () => {
    Alert.alert('Padam Semua', 'Padam semua data (tidak boleh undur)?', [
      { text: 'Batal', style: 'cancel' },
      { text: 'Padam', style: 'destructive', onPress: async () => {
          setParticipants([]); setMaintenance(0);
          await AsyncStorage.removeItem(STORAGE_KEY); await AsyncStorage.removeItem(MAINT_KEY);
        } }
    ]);
  };

  const handleExportPDF = async () => {
    const html = `
      <html>
        <body>
          <h1>eKEMATIAN — Laporan Audit</h1>
          <p>Tarikh: ${new Date().toLocaleString()}</p>
          <p>Jumlah peserta: ${totalParticipants}</p>
          <p>Jumlah masuk: ${fmt(totalIncome)}</p>
          <p>Jumlah keluar: ${fmt(totalExpense)}</p>
          <p>Dana maintenance: ${fmt(maintenance)}</p>
          <p>Baki: ${fmt(balance)}</p>
          <h2>Senarai Peserta</h2>
          <table border="1" cellpadding="6" cellspacing="0">
            <thead><tr><th>Nama</th><th>IC</th><th>Status</th><th>In</th><th>Out</th><th>Funeral</th></tr></thead>
            <tbody>
              ${participants.map(p => `<tr>
                <td>${p.name}</td>
                <td>${p.ic || ''}</td>
                <td>${p.status}</td>
                <td>${Number(p.income || 0).toFixed(2)}</td>
                <td>${Number(p.expense || 0).toFixed(2)}</td>
                <td>${Number(p.funeral || 0).toFixed(2)}</td>
              </tr>`).join('')}
            </tbody>
          </table>
        </body>
      </html>
    `;
    try {
      const { uri } = await Print.printToFileAsync({ html });
      await Sharing.shareAsync(uri, { mimeType: 'application/pdf' });
    } catch (e) {
      Alert.alert('Ralat', 'Gagal eksport PDF: ' + String(e));
      console.error(e);
    }
  };

  const handleExportCSV = async () => {
    const rows = [['name','ic','address','status','income','expense','funeral','will']];
    participants.forEach(p => { rows.push([p.name,p.ic||'',p.address||'',p.status||'alive',p.income||0,p.expense||0,p.funeral||0,p.will||'']); });
    const csv = rows.map(r => r.map(c => `"${String(c).replace(/"/g,'""')}"`).join(',')).join('\n');
    try {
      const path = FileSystem.cacheDirectory + `ekematian_export_${Date.now()}.csv`;
      await FileSystem.writeAsStringAsync(path, csv, { encoding: FileSystem.EncodingType.UTF8 });
      await Sharing.shareAsync(path, { mimeType: 'text/csv' });
    } catch (e) {
      Alert.alert('Ralat', 'Gagal eksport CSV: ' + String(e));
      console.error(e);
    }
  };

  const handleUploadJSON = async () => {
    try {
      const res = await DocumentPicker.getDocumentAsync({ type: 'application/json' });
      if (res.type === 'success') {
        const content = await FileSystem.readAsStringAsync(res.uri, { encoding: FileSystem.EncodingType.UTF8 });
        const parsed = JSON.parse(content);
        if (!Array.isArray(parsed)) { Alert.alert('Format tidak sah', 'Fail JSON mesti mengandungi array participants.'); return; }
        const normalized = parsed.map((p, idx) => ({
          id: p.id || Date.now() + idx,
          name: p.name || 'Tanpa Nama',
          ic: p.ic || '',
          address: p.address || '',
          will: p.will || '',
          income: Number(p.income || 0),
          expense: Number(p.expense || 0),
          funeral: Number(p.funeral || 0),
          status: p.status || 'alive',
          image: p.image || 'https://via.placeholder.com/100'
        }));
        Alert.alert('Import JSON', `Gantikan data peserta sekarang dengan ${normalized.length} rekod?`, [
          { text: 'Batal', style: 'cancel' },
          { text: 'Gantikan', onPress: async () => { setParticipants(normalized); await saveData(STORAGE_KEY, normalized); } }
        ]);
      }
    } catch (e) {
      console.error(e); Alert.alert('Ralat', 'Gagal import: ' + String(e));
    }
  };

  const filtered = participants.filter(p =>
    (p.name || '').toLowerCase().includes(search.toLowerCase()) ||
    (p.ic || '').includes(search)
  );

  return (
    <View style={styles.container}>
      <Image source={{ uri: 'https://via.placeholder.com/80' }} style={styles.logo} />
      <Text style={styles.title}>eKEMATIAN - Pertubuhan Belerang Merah</Text>

      <View style={styles.stats}>
        <Text>Ahli: {totalParticipants}</Text>
        <Text>Masuk: {fmt(totalIncome)}</Text>
        <Text>Keluar: {fmt(totalExpense)}</Text>
        <Text>Maintenance: {fmt(maintenance)}</Text>
        <Text style={{ fontWeight: 'bold' }}>Baki: {fmt(balance)}</Text>
      </View>

      <TextInput style={styles.input} placeholder="Cari nama atau IC..." value={search} onChangeText={setSearch} />

      <View style={{ flexDirection: 'row', gap: 8, justifyContent: 'space-between', marginBottom: 8 }}>
        <View style={{ flex: 1, marginRight: 6 }}><Button title="Tambah Ahli" onPress={() => { setEditData(null); setModalVisible(true); }} /></View>
        <View style={{ flex: 1, marginLeft: 6 }}><Button title="Eksport PDF" onPress={handleExportPDF} /></View>
      </View>

      <View style={{ flexDirection: 'row', gap: 8, justifyContent: 'space-between', marginBottom: 8 }}>
        <View style={{ flex: 1, marginRight: 6 }}><Button title="Eksport CSV" onPress={handleExportCSV} /></View>
        <View style={{ flex: 1, marginLeft: 6 }}><Button title="Import JSON" onPress={handleUploadJSON} /></View>
      </View>

      <View style={{ flexDirection: 'row', gap: 8, justifyContent: 'space-between', marginBottom: 8 }}>
        <View style={{ flex: 1, marginRight: 6 }}><Button title="Reset Dummy" onPress={resetDummy} color="#f0ad4e" /></View>
        <View style={{ flex: 1, marginLeft: 6 }}><Button title="Clear Semua" onPress={clearAll} color="#d9534f" /></View>
      </View>

      <Text style={styles.subtitle}>Senarai Peserta</Text>
      <FlatList
        data={filtered}
        keyExtractor={(item) => String(item.id)}
        renderItem={({ item }) => (
          <ClaimItem
            participant={item}
            onEdit={(d) => { setEditData(d); setModalVisible(true); }}
            onDelete={handleDelete}
            onMarkDead={handleMarkDead}
          />
        )}
        ListEmptyComponent={<Text>Tiada peserta.</Text>}
      />

      <Text style={styles.subtitle}>Senarai Sukarelawan</Text>
      <FlatList data={volunteers} keyExtractor={(i) => String(i.id)} renderItem={({ item }) => <VolunteerItem volunteer={item} />} />

      <AddEditModal visible={modalVisible} onClose={() => setModalVisible(false)} onSave={handleSaveParticipant} editData={editData} />
    </View>
  );
}

const styles = StyleSheet.create({
  container: { flex: 1, padding: 16, backgroundColor: '#fff' },
  logo: { width: 80, height: 80, alignSelf: 'center', marginBottom: 6 },
  title: { fontSize: 20, fontWeight: 'bold', textAlign: 'center', marginBottom: 10 },
  stats: { padding: 10, borderWidth: 1, borderColor: '#eee', borderRadius: 8, marginBottom: 10, backgroundColor: '#fafafa' },
  input: { borderWidth: 1, borderColor: '#ccc', borderRadius: 8, padding: 10, marginBottom: 10 },
  subtitle: { fontSize: 16, fontWeight: 'bold', marginTop: 12, marginBottom: 6 },
  item: { flexDirection: 'row', alignItems: 'center', paddingVertical: 10, borderBottomWidth: 1, borderColor: '#eee' },
  avatar: { width: 48, height: 48, borderRadius: 24, marginRight: 12 },
  name: { fontWeight: 'bold' },
  btnSmall: { backgroundColor: '#007bff', paddingHorizontal: 8, paddingVertical: 6, borderRadius: 6 },
  btnText: { color: '#fff', fontSize: 12 }
});
